version: '3.8'

services:
  # 前端应用
  gregory-service-web:
    build: .
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - gregory-service-api
    networks:
      - gregory-network

  # 后端 API (如果需要在同一个 compose 中运行)
  gregory-service-api:
    image: gregory-service-api:latest
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - KEYCLOAK_HOST=keycloak
      - POSTGRESQL_HOST=postgres
    depends_on:
      - postgres
      - keycloak
    networks:
      - gregory-network

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=tp
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - gregory-network

  # Keycloak 认证服务
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=root
      - KC_DB_PASSWORD=example
    command: start-dev --import-realm
    volumes:
      - ./init-keycloak:/opt/keycloak/data/import
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - gregory-network

  # Nginx (可选的反向代理)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - gregory-service-web
      - gregory-service-api
    networks:
      - gregory-network

volumes:
  postgres_data:

networks:
  gregory-network:
    driver: bridge 